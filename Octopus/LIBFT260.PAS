unit LIBFT260;
{ ************************************************************************** }
{ }
{ This C DLL header file first (automatic) conversion generated by: }
{ HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com) }
{ Final Delphi-Jedi (Darth) command-line units edition }
{ }
{ Generated Date:   2018/8/5 }
{ Generated Time: 21:20:15 }
{ }
{ ************************************************************************** }

interface

uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}
{ ///------------------------------------------------------------------------------ }
{ +//* }
{ -* Copyright © 2001-2015 Future Technology Devices International Limited }
{ -* }
{ -* THIS SOFTWARE IS PROVIDED BY FUTURE TECHNOLOGY DEVICES INTERNATIONAL LIMITED "AS IS" }
{ -* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES }
{ -* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL }
{ -* FUTURE TECHNOLOGY DEVICES INTERNATIONAL LIMITED BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, }
{ -* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT }
{ -* OF SUBSTITUTE GOODS OR SERVICES LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION) }
{ -* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR }
{ -* TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, }
{ -* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. }
{ -* }
{ -* }
{ -* @file LibFT260.h }
{ -* }
{ -* @author FTDI }
{ -* @date 2015-07-01 }
{ -* }
{ -* Copyright © 2015 Future Technology Devices International Limited }
{ -* Company Confidential }
{ -* }
{ -* Rivision History: }
{ -* 1.0 - initial version }
{ -* }
{ = }

// {$INCLUDE <stdio.h>}
// {$INCLUDE <windows.h>}

// {$IFDEF LIBFT260_EXPORTS}
// const
// LIBFT260_API = __declspec(dllexport);
// {$ELSE}
// const
// LIBFT260_API = __declspec(dllimport);
// {$ENDIF}

type
  FT260_HANDLE = LongInt;
  PFT260_HANDLE = ^FT260_HANDLE;

type
  uint8 = Byte;

type
  uint16 = Word;
  // type
  // uint64 = UInt64;//UNSIGNED LONG LONG;

type
  u8 = Byte;

type
  u16 = Word;

type
  u32 = LongInt;
  // type
  // u64 = UNSIGNED LONG LONG;

type
  int8 = Char;

type
  int16 = SmallInt;
  // type
  // int64 = LONG LONG;

{$IFNDEF _MSC_VER}

type
  BOOL = Boolean;
{$ENDIF}
{$IFDEF __x86_64__}

type
  uint32 = Word;

type
  int32 = Integer;
{$ELSE}

type
  uint32 = LongInt;

type
  int32 = LongInt;
{$ENDIF}

  { +// I2C Master Controller Status }
  { -* bit 0 = controller busy: all other status bits invalid }
  { -* bit 1 = error condition }
  { -* bit 2 = slave address was not acknowledged during last operation }
  { -* bit 3 = data not acknowledged during last operation }
  { -* bit 4 = arbitration lost during last operation }
  { -* bit 5 = controller idle }
  { -* bit 6 = bus busy }
  { = }
  { const
    I2CM_CONTROLLER_BUSY(status) = (((status) AND 0x01) != 0);
    const
    I2CM_DATA_NACK(status) = (((status) & 0x0A) != 0);
    const
    I2CM_ADDRESS_NACK(status) = (((status) & 0x06) != 0);
    const
    I2CM_ARB_LOST(status) = (((status) & 0x12) != 0);
    const
    I2CM_IDLE(status) = (((status) & 0x20) != 0);
    const
    I2CM_BUS_BUSY(status) = (((status) & 0x40) != 0);
  }
type
  FT260_STATUS = (FT260_OK, FT260_INVALID_HANDLE, FT260_DEVICE_NOT_FOUND,
    FT260_DEVICE_NOT_OPENED, FT260_DEVICE_OPEN_FAIL, FT260_DEVICE_CLOSE_FAIL,
    FT260_INCORRECT_INTERFACE, FT260_INCORRECT_CHIP_MODE,
    FT260_DEVICE_MANAGER_ERROR, FT260_IO_ERROR, FT260_INVALID_PARAMETER,
    FT260_NULL_BUFFER_POINTER, FT260_BUFFER_SIZE_ERROR, FT260_UART_SET_FAIL,
    FT260_RX_NO_DATA, FT260_GPIO_WRONG_DIRECTION, FT260_INVALID_DEVICE,
    FT260_OTHER_ERROR);

type
  FT260_GPIO2_Pin = (FT260_GPIO2_GPIO = 0, FT260_GPIO2_SUSPOUT = 1,
    FT260_GPIO2_PWREN = 2, FT260_GPIO2_TX_LED = 4);

type
  FT260_GPIOA_Pin = (FT260_GPIOA_GPIO = 0, FT260_GPIOA_TX_ACTIVE = 3,
    FT260_GPIOA_TX_LED = 4);

type
  FT260_GPIOG_Pin = (FT260_GPIOG_GPIO = 0, FT260_GPIOG_PWREN = 2,
    FT260_GPIOG_RX_LED = 5, FT260_GPIOG_BCD_DET = 6);

type
  FT260_Clock_Rate = (FT260_SYS_CLK_12M = 0, FT260_SYS_CLK_24M,
    FT260_SYS_CLK_48M);

type
  FT260_Interrupt_Trigger_Type = (FT260_INTR_RISING_EDGE = 0,
    FT260_INTR_LEVEL_HIGH, FT260_INTR_FALLING_EDGE, FT260_INTR_LEVEL_LOW);

type
  FT260_Interrupt_Level_Time_Delay = (FT260_INTR_DELY_1MS = 1,
    FT260_INTR_DELY_5MS, FT260_INTR_DELY_30MS);

type
  FT260_Suspend_Out_Polarity = (FT260_SUSPEND_OUT_LEVEL_HIGH = 0,
    FT260_SUSPEND_OUT_LEVEL_LOW);

type
  FT260_UART_Mode = (FT260_UART_OFF = 0, FT260_UART_RTS_CTS_MODE,
    // hardware flow control RTS, CTS mode
    FT260_UART_DTR_DSR_MODE, // hardware flow control DTR, DSR mode
    FT260_UART_XON_XOFF_MODE, // software flow control mode
    FT260_UART_NO_FLOW_CTRL_MODE // no flow control mode
    );

type
  FT260_Data_Bit = (FT260_DATA_BIT_7 = 7, FT260_DATA_BIT_8 = 8);

type
  FT260_Stop_Bit = (FT260_STOP_BITS_1 = 0, FT260_STOP_BITS_2 = 2);

type
  FT260_Parity = (FT260_PARITY_NONE = 0, FT260_PARITY_ODD, FT260_PARITY_EVEN,
    FT260_PARITY_MARK, FT260_PARITY_SPACE);

type
  FT260_RI_Wakeup_Type = (FT260_RI_WAKEUP_RISING_EDGE = 0,
    FT260_RI_WAKEUP_FALLING_EDGE);

type
  FT260_GPIO_DIR = (FT260_GPIO_IN = 0, FT260_GPIO_OUT);

type
  FT260_GPIO = (FT260_GPIO_0 = 1 shl 0, FT260_GPIO_1 = 1 shl 1,
    FT260_GPIO_2 = 1 shl 2, FT260_GPIO_3 = 1 shl 3, FT260_GPIO_4 = 1 shl 4,
    FT260_GPIO_5 = 1 shl 5, FT260_GPIO_A = 1 shl 6, FT260_GPIO_B = 1 shl 7,
    FT260_GPIO_C = 1 shl 8, FT260_GPIO_D = 1 shl 9, FT260_GPIO_E = 1 shl 10,
    FT260_GPIO_F = 1 shl 11, FT260_GPIO_G = 1 shl 12, FT260_GPIO_H = 1 shl 13);

type
  FT260_I2C_FLAG = (FT260_I2C_NONE = 0, FT260_I2C_START = $02,
    FT260_I2C_REPEATED_START = $03, FT260_I2C_STOP = $04,
    FT260_I2C_START_AND_STOP = $06);

type
  FT260_PARAM_1 = (FT260_DS_CTL0 = $50, FT260_DS_CTL3 = $51,
    FT260_DS_CTL4 = $52, FT260_SR_CTL0 = $53, FT260_GPIO_PULL_UP = $61,
    FT260_GPIO_OPEN_DRAIN = $62, FT260_GPIO_PULL_DOWN = $63,
    FT260_GPIO_GPIO_SLEW_RATE = $65);

type
  FT260_PARAM_2 = (FT260_GPIO_GROUP_SUSPEND_0 = $10, // for gpio 0 ~ gpio 5
    FT260_GPIO_GROUP_SUSPEND_A = $11, // for gpio A ~ gpio H
    FT260_GPIO_DRIVE_STRENGTH = $64);

type
  FT260_GPIO_Report = record
    value: Word; // GPIO0~5 values
    dir: Word; // GPIO0~5 directions
    gpioN_value: Word; // GPIOA~H values
    gpioN_dir: Word; // GPIOA~H directions
  end;

  { #pragma pack(push, 1) }
type
  UartConfig = record
    flow_ctrl: u8;
    baud_rate: u32;
    data_bit: u8;
    parity: u8;
    stop_bit: u8;
    breaking: u8;
  end; { UartConfig }
  { #pragma pack(pop) }

  // {$IFDEF __cplusplus}
  // {$ENDIF}

  // function SetupDiGetClassDevs(const ClassGuid: PGUID; Enumerator: PChar; hwndParent: HWND; Flags: DWORD): Cardinal; stdcall; external 'Setupapi.dll' name 'SetupDiGetClassDevsA';
  // type LPDWORD = LPDWORD;
  // FT260 General Functions
function FT260_CreateDeviceList(lpdwNumDevs: LPDWORD): Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_CreateDeviceList@4';
function FT260_GetDevicePath(pDevicePath: PWCHAR; bufferLength: DWORD;
  deviceIndex: DWORD): Integer; stdcall;
  external 'LibOctopus260.dll' name 'FT260_GetDevicePath';
function FT260_Open(iDevice: Integer; pFt260Handle: PFT260_HANDLE): Integer;
  stdcall; external 'LibOctopus260.dll' name '_FT260_Open@8';
function FT260_OpenByVidPid(vid: Word; pid: Word; deviceIndex: DWORD;
  pFt260Handle: PFT260_HANDLE): Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_OpenByVidPid@16';
function FT260_OpenByDevicePath(pDevicePath: PCHAR; pFt260Handle: PFT260_HANDLE)
  : Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_OpenByDevicePath@8';
function FT260_Close(t260Handle: PFT260_HANDLE): Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_Close@4';

function FT260_SetClock(t260Handle: PFT260_HANDLE; clk: FT260_Clock_Rate)
  : FT260_STATUS; stdcall; external 'LibOctopus260.dll' name 'FT260_SetClock';
function FT260_SetWakeupInterrupt(t260Handle: PFT260_HANDLE; enable: BOOL)
  : FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SetWakeupInterrupt';
function FT260_SetInterruptTriggerType(t260Handle: PFT260_HANDLE;
  ITtype: FT260_Interrupt_Trigger_Type; delay: FT260_Interrupt_Level_Time_Delay)
  : FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SetInterruptTriggerType';
function FT260_SelectGpio2Function(t260Handle: PFT260_HANDLE;
  gpio2Function: FT260_GPIO2_Pin): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SelectGpio2Function';
function FT260_SelectGpioAFunction(t260Handle: PFT260_HANDLE;
  gpioAFunction: FT260_GPIOA_Pin): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SelectGpioAFunction';
function FT260_SelectGpioGFunction(t260Handle: PFT260_HANDLE;
  gpioGFunction: FT260_GPIOG_Pin): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SelectGpioGFunction';
function FT260_SetSuspendOutPolarity(t260Handle: PFT260_HANDLE;
  polarity: FT260_Suspend_Out_Polarity): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SetSuspendOutPolarity';

function FT260_SetParam_U8(t260Handle: PFT260_HANDLE; param: FT260_PARAM_1;
  value: uint8): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SetParam_U8';
function FT260_SetParam_U16(t260Handle: PFT260_HANDLE; param: FT260_PARAM_2;
  value: uint16): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_SetParam_U16';

function FT260_GetChipVersion(t260Handle: PFT260_HANDLE;
  lpdwChipVersion: LPDWORD): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_GetChipVersion';
function FT260_GetLibVersion(lpdwLibVersion: LPDWORD): FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_GetLibVersion';

function FT260_EnableI2CPin(t260Handle: PFT260_HANDLE; enable: BOOL)
  : FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_EnableI2CPin';
function FT260_SetUartToGPIOPin(ft260Handle: PFT260_HANDLE): FT260_STATUS;
  stdcall; external 'LibOctopus260.dll' name 'FT260_SetUartToGPIOPin';
function FT260_EnableDcdRiPin(t260Handle: PFT260_HANDLE; enable: BOOL)
  : FT260_STATUS; stdcall;
  external 'LibOctopus260.dll' name 'FT260_EnableDcdRiPin';

// FT260 I2C Functions
function FT260_I2CMaster_Init(t260Handle: PFT260_HANDLE; kbps: uint32): Integer;
  stdcall; external 'LibOctopus260.dll' name '_FT260_I2CMaster_Init@8';
function FT260_I2CMaster_Read(t260Handle: PFT260_HANDLE; deviceAddress: uint8;
  flag: FT260_I2C_FLAG; lpBuffer: LPVOID; dwBytesToRead: DWORD;
  lpdwBytesReturned: LPDWORD): Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_I2CMaster_Read@24';
function FT260_I2CMaster_Write(t260Handle: PFT260_HANDLE; deviceAddress: uint8;
  flag: FT260_I2C_FLAG; lpBuffer: LPVOID; dwBytesToWrite: DWORD;
  lpdwBytesWritten: LPDWORD): Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_I2CMaster_Write@24';
function FT260_I2CMaster_GetStatus(t260Handle: PFT260_HANDLE; status: PBYTE)
  : Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_I2CMaster_GetStatus@8';
function FT260_I2CMaster_Reset(ft260Handle: PFT260_HANDLE): Integer; stdcall;
  external 'LibOctopus260.dll' name '_FT260_I2CMaster_Reset@4';
// LIBFT260_API FT260_STATUS WINAPI FT260_I2CMaster_Init(FT260_HANDLE ft260Handle, uint32 kbps);
// LIBFT260_API FT260_STATUS WINAPI FT260_I2CMaster_Read(FT260_HANDLE ft260Handle, uint8 deviceAddress, FT260_I2C_FLAG flag, LPVOID lpBuffer, DWORD dwBytesToRead, LPDWORD lpdwBytesReturned);
// LIBFT260_API FT260_STATUS WINAPI FT260_I2CMaster_Write(FT260_HANDLE ft260Handle, uint8 deviceAddress, FT260_I2C_FLAG flag, LPVOID lpBuffer, DWORD dwBytesToWrite, LPDWORD lpdwBytesWritten);
// LIBFT260_API FT260_STATUS WINAPI FT260_I2CMaster_GetStatus(FT260_HANDLE ft260Handle, uint8* status);
// LIBFT260_API FT260_STATUS WINAPI FT260_I2CMaster_Reset(FT260_HANDLE ft260Handle);

{ // FT260 UART Functions
  function  FT260_UART_Init(ft260Handle:PFT260_HANDLE):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name 'FT260_UART_Init';
  function  FT260_UART_SetBaudRate(t260Handle:pFT260_HANDLE; baudRate:ULONG):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name 'FT260_UART_SetBaudRate';
  function  FT260_UART_SetFlowControl(t260Handle:pFT260_HANDLE; flowControl:FT260_UART_Mode):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name 'FT260_UART_SetFlowControl';
  function  FT260_UART_SetDataCharacteristics(t260Handle:pFT260_HANDLE; dataBits:FT260_Data_Bit; stopBits:FT260_Stop_Bit; parity:FT260_Parity):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name 'FT260_UART_SetDataCharacteristics';
  function  FT260_UART_SetBreakOn(FT260_HANDLE ft260Handle):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_SetBreakOff(FT260_HANDLE ft260Handle):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_SetXonXoffChar(t260Handle:pFT260_HANDLE; UCHAR Xon, UCHAR Xoff):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_GetConfig(t260Handle:pFT260_HANDLE; UartConfig* pUartConfig):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_GetQueueStatus(t260Handle:pFT260_HANDLE; LPDWORD lpdwAmountInRxQueue):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_Read(t260Handle:pFT260_HANDLE; LPVOID lpBuffer, DWORD dwBufferLength, DWORD dwBytesToRead, LPDWORD lpdwBytesReturned):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_Write(t260Handle:pFT260_HANDLE; LPVOID lpBuffer, DWORD dwBufferLength, DWORD dwBytesToWrite, LPDWORD lpdwBytesWritten):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_Reset(FT260_HANDLE ft260Handle):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name

  function  FT260_UART_GetDcdRiStatus(t260Handle:pFT260_HANDLE; uint8* value):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_EnableRiWakeup(t260Handle:pFT260_HANDLE; BOOL enable):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_UART_SetRiWakeupConfig(t260Handle:pFT260_HANDLE; FT260_RI_Wakeup_Type type):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name

  // Interrupt is transmitted by UART interface
  function  FT260_GetInterruptFlag(t260Handle:pFT260_HANDLE; BOOL* pbFlag):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_CleanInterruptFlag(t260Handle:pFT260_HANDLE; BOOL* pbFlag):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name


  // FT260 GPIO Functions
  function  FT260_GPIO_Set(t260Handle:pFT260_HANDLE; FT260_GPIO_Report report):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_GPIO_Get(t260Handle:pFT260_HANDLE; FT260_GPIO_Report *report):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_GPIO_SetDir(t260Handle:pFT260_HANDLE; WORD pinNum, BYTE dir):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_GPIO_Read(t260Handle:pFT260_HANDLE; WORD pinNum, BYTE* pValue):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
  function  FT260_GPIO_Write(t260Handle:pFT260_HANDLE; WORD pinNum, BYTE value):FT260_STATUS;stdcall; external 'LibOctopus260.dll' name
}

VAR
  CurrentDevicesJvHidDevicePFT260_HANDLE: PFT260_HANDLE;

implementation

end.
